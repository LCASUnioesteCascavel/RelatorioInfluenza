\Inicio{
      \Comentario{Controle dos vértices visitados e não visitados} \\
      verticesJaVisitados = vetor\_associativo\_vazio() \\
      verticesNaoVisitados = vetor\_associativo\_vazio() \\
      
      primeiraRua = primeiraRuaVizinhaAoVerticeDeOrigem() \\
      adiciona(primeiraRua, verticesNaoVisitados) \\
      
      \Comentario{Estrutura necessária à posterior recuperação do caminho} \\
      verticesAnteriores = vetor\_associativo\_vazio() \\
      \Para{cada vertice $v$ em vertices} {
            adiciona(nova\_entrada($v$, nulo), verticesAnteriores) \\
      }
      
      \Comentario{Condições iniciais ao algoritmo} \\
      distanciaOrigemAoAtual = vetor\_associativo\_vazio() \\
      \Para{cada vertice $v$ em vertices} {
            adiciona(nova\_entrada($v$, infinito), distanciaOrigemAoAtual) \\
      }
      adiciona(nova\_entrada(primeiraRua, 0), distanciaOrigemAoAtual) \\
      
      distanciaAtualAoDestino = vetor\_associativo\_vazio() \\
      \Para{cada vertice $v$ em vertices} {
            adiciona(nova\_entrada($v$, infinito), distanciaAtualAoDestino) \\
      }
      
      \Comentario{São utilizados os vértices centróides dos lotes origem e destino} \\
      pontoOrigem = centroidesLotes[verticeOrigem.quadra, verticeOrigem.lote] \\
      pontoDestino = centroidesLotes[verticeDestino.quadra, verticeDestino.lote] \\
      adiciona(nova\_entrada(primeiraRua, distanciaEuclidiana(pontoOrigem, pontoDestino)), distanciaAtualAoDestino) \\
      
      \Comentario{Início do algoritmo A*} \\
      \Enqto{$!$ vazio(verticesNaoVisitados)} {
            \Comentario{O vértice atual é o vértice não visitado com menor distância ao destino} \\
            atual = verticeComMenorDistanciaAtualAoDestino(verticesNaoVisitados) \\
            \Se{vizinhanca(atual, verticeDestino) $>$ $0$} {
                  \Comentario{O processo de busca termina caso o vértice atual possua vizinhanças com o lote destino} \\
                  \Retorna{aEstrelaConstruirCaminho(verticesAnteriores, atual)} \\
            }
            
            \Comentario{Controle dos vértices já visitados para evitar que o algoritmo entre em um ciclo infinito} \\
            remove(atual, verticesNaoVisitados) \\
            adiciona(atual, verticesJaVisitados) \\
            
            \Comentario{Seleção do próximo vértice de expansão da busca} \\
            \Para{cada ponto $p$ em centroidesEsquinas[atual]} {
                  \Se{contem(verticesJaVisitados, $p$)} {
                      \Comentario{continuar} \\
                  }
                  pontoDestinoAux = centroidesLotes[verticeDestino] \\
                  pontoOrigem = verticeComMenorDistanciaAoPontoDestinoAux(centroidesEsquinas) \\
                  pontoDestino = $p$ \\
                  \Comentario{Cálculo da distância entre o lote origem e o lote destino passando pelo vértice atual} \\
                  novaDistancia = distanciaOrigemAoAtual[atual] + distanciaEuclidiana(pontoOrigem, pontoDestino) \\
                  \eSe{$!$ contem(verticesNaoVisitados, $p$)} {
                        adiciona($p$, verticesNaoVisitados) \\
                  } {
                        \Se{novaDistancia $>=$ distanciaOrigemAoAtual[$p$]} {
                            \Comentario{continuar} \\
                        }
                  }
                  \Comentario{Expansão da busca para o vértice atual} \\
                  adiciona(nova\_entrada($p$, atual), verticesAnteriores) \\
                  adiciona(nova\_entrada($p$, novaDistancia), distanciaOrigemAoAtual) \\
                  pontoOrigem = $p$ \\
                  pontoDestino = centroidesLotes[verticeDestino] \\
                  adiciona(nova\_entrada(primeiraRua, distanciaEuclidiana(pontoOrigem, pontoDestino)), distanciaAtualAoDestino) \\
                  adiciona(nova\_entrada($p$, distanciaEuclidiana(pontoOrigem, pontoDestino)), distanciaAtualAoDestino) \\
            }
      }	
}
